// Native Modules
var readline = require('readline');
var path = require('path');
var fs = require('fs');

// Custom Modules
var timestamp = require('timestamp');
var log = require('log');

// Paths
var users_file = path.join(__dirname, "..", "..", "data", "users", "users.txt");
var nextID_file = path.join(__dirname, "..", "..", "data", "users", "nextID.txt");

// User object
function User(data) {
  this.id = null;
  this.firstName = null;
  this.lastName = null;
  this.username = null;
  this.emailAddress = null;
  this.phoneNumber = null;

  // user.create({emailAddress: "user@mail.com"})
  if (arguments[0] != undefined) {
    if (typeof arguments[0] == "object") {
      for (key in arguments[0])
        if (key != "id")
          if (this.hasOwnProperty(key))
            this[key] = arguments[0][key]
    } else {
      throw new Error("parameter must be an object");
    }
  } // if arguments[0] != undefined
};
// get/set firstName
User.prototype.getFirstName = function() {
  return this.firstName;
};
User.prototype.setFirstName = function(firstName) {
  this.firstName = firstName;
};
// get/set lastName
User.prototype.getLastName = function() {
  return this.lastName;
};
User.prototype.setLastName = function(lastName) {
  this.lastName = lastName;
};
// get/set username
User.prototype.getUsername = function() {
  return this.username;
};
User.prototype.setUsername = function(username) {
  this.username = username;
};
// get/set emailAddress
User.prototype.getEmailAddress = function() {
  return this.emailAddress;
};
User.prototype.setEmailAddress = function(emailAddress) {
  this.emailAddress = emailAddress;
};
// get/set phoneNumber
User.prototype.getPhoneNumber = function() {
  return this.phoneNumber;
};
User.prototype.setPhoneNumber = function(phoneNumber) {
  this.phoneNumber = phoneNumber;
};
// toString
User.prototype.toString = function() {
  return  this.id + ","
        + this.firstName + ","
        + this.lastName + ","
        + this.username + ","
        + this.emailAddress + ","
        + this.phoneNumber;
};
// equals
User.prototype.equals = function(user) {
  return this.id == user.id
      && this.firstName == user.firstName
      && this.lastName == user.lastName
      && this.username == user.username
      && this.emailAddress == user.emailAddress
      && this.phoneNumber == user.phoneNumber;
};

// Exports
module.exports = {
  // CRUD User actions
  new: function() {
    return new User();
  },
  create: function(data) {
    var user = new User(data);
    fs.readFile(nextID_file, function(err, data) {
      if (err) throw err;
      user.id = parseInt(data);
      var nextID = user.id + 1;
      fs.appendFile(users_file, user + "\n", function(err) {
        if (err) throw err;
        log(timestamp() + " [*] Created user: " + user);
        fs.writeFile(nextID_file, nextID, function(err, data) {
          if (err) throw err;
          log(timestamp() + " [*] Updated nextID.txt to " + nextID);
        });
      });
    });
    return user;
  },
  find: function(id, callback) {
    this.all(function(users) {
      callback(users[id]);
    });
  },
  all: function(callback) {
    fs.readFile(users_file, function(err, data) {
      if (err) throw err;
      var users = {};
      var lines = (""+data).split("\n");
      for (var i = 0; i < lines.length; i++) {
        var col = -1;
        var csv = lines[i].split(",");
        var data = {
          id: csv[++col],
          firstName: csv[++col],
          lastName: csv[++col],
          username: csv[++col],
          emailAddress: csv[++col],
          phoneNumber: csv[++col]
        };
        if (csv[0] == ""); // exclude newlines
        else users[csv[0]] = new User(data);
      }
      callback(users);
    });
  },
  update: function(id, user, callback) {

  },
  destroy: function(id, callback) {
    
  }
};
